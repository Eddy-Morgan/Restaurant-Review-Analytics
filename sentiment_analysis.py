#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jan  9 19:58:32 2020

@author: apple
"""
import pandas as pd #pandas is a library providing data structures and data analysis tools 
import imageio #imageio is a library used to read and write image data
import matplotlib.pyplot as plt #matplotlib.pyplot provides a MATLAB-like way of plotting
from wordcloud import WordCloud, STOPWORDS#STOPWORDS will filter out useless words before processing of natural language 

'''define a function used to generate the word cloud:'''
def WordcloudGenerator(number):
    '''write reviews of the selected restaurant into a txt file:'''
    fh = pd.read_excel('review.xlsx')#getting a file handler of review.xlsx 
    review_content = fh[fh.rid==number]['reviewcontent'].values#getting reviews of the selected restaurant as a list
    txt = open('static/generated_reviews/review_{}.txt'.format(number),'w')
    for i in range(0,len(review_content)):
        txt.write(str(review_content[i]))
        txt.write('\n\n')
    txt.close()#create a txt file named review_number.txt and write each customer's review into it 
    '''generate a word cloud based on the txt file: '''
    text = open('static/generated_reviews/review_{}.txt'.format(number)).read()
    cloud_image = imageio.imread("static/cloud.png") #read the image of the cloud
    #set parameters of the word cloud:
    my_wordcloud = WordCloud( background_color = 'beige',#set the background colour
                              mask = cloud_image, #set the background picture (the cloud image)         
                              margin=2, #set the margins between different words
                              max_words = 80, #set the maximum number of words to be displayed
                              stopwords = STOPWORDS,#filter useless words
                              max_font_size = 100, #set the maximum font size
                              random_state = 1, #set random state as 1 to keep word clouds' style the same everytime user run the code
                              relative_scaling=.8  #adjust the importance of a frequency word
                                )
    my_wordcloud.generate(text)# generate the word cloud
    plt.axis("off")#axises are not allowed to show up
    plt.imshow(my_wordcloud)#show the word cloud
    print("(๑•̀ㅂ•́)و✧ The word cloud of restaurant No.{} has been generated from {} reviews!".format(number, len(review_content)))    
    '''save the word cloud to a png file:'''
    my_wordcloud.to_file("static/generated_clouds/result_{}.png".format(number))# save image

def draw_wordcloud(rid):    
    '''ggenerate word clouds according to user's input: '''
    while True:
        try:
            restaurant_number = int(rid)
            if restaurant_number < 1 or restaurant_number > 958:#there are 958 restaurant in total in review.xlsx
                print("╮(╯▽╰)╭ Number out of range, please input again!")
            else:#if the user make the right input, a word cloud will be generated by the function
                print(">.< Please wait for a while ~ ~ ~ ")
                WordcloudGenerator(restaurant_number)
                break
        except Exception as e:#handle exceptions
            print("ERROR: {}".format(e), end = " ")
            print("(＞﹏＜) Please input a number following the construction again...")
        
        

        
        
        
        
        
        
        
        
        

